{
  "dependencies": [
    "@udecode/plate-block-quote",
    "@udecode/plate-heading",
    "@udecode/plate-indent-list",
    "@radix-ui/react-dropdown-menu"
  ],
  "doc": {
    "description": "A menu for converting between different block types.",
    "docs": [
      {
        "route": "/docs/basic-elements",
        "title": "Basic Elements"
      },
      {
        "route": "/docs/indent-list",
        "title": "Indent List"
      },
      {
        "route": "https://pro.platejs.org/docs/components/turn-into-dropdown-menu"
      }
    ],
    "examples": [
      "basic-nodes-demo",
      "basic-nodes-pro"
    ]
  },
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport type { DropdownMenuProps } from '@radix-ui/react-dropdown-menu';\n\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport { getNodeEntries, isBlock } from '@udecode/plate-common';\nimport {\n  ParagraphPlugin,\n  focusEditor,\n  useEditorRef,\n  useEditorSelector,\n} from '@udecode/plate-common/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { ListStyleType, toggleIndentList } from '@udecode/plate-indent-list';\nimport {\n  Heading1Icon,\n  Heading2Icon,\n  Heading3Icon,\n  ListIcon,\n  ListOrderedIcon,\n  PilcrowIcon,\n  QuoteIcon,\n} from 'lucide-react';\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuTrigger,\n  useOpenState,\n} from './dropdown-menu';\nimport { ToolbarButton } from './toolbar';\n\nconst items = [\n  {\n    description: 'Paragraph',\n    icon: PilcrowIcon,\n    label: 'Paragraph',\n    value: ParagraphPlugin.key,\n  },\n  {\n    description: 'Heading 1',\n    icon: Heading1Icon,\n    label: 'Heading 1',\n    value: HEADING_KEYS.h1,\n  },\n  {\n    description: 'Heading 2',\n    icon: Heading2Icon,\n    label: 'Heading 2',\n    value: HEADING_KEYS.h2,\n  },\n  {\n    description: 'Heading 3',\n    icon: Heading3Icon,\n    label: 'Heading 3',\n    value: HEADING_KEYS.h3,\n  },\n  {\n    description: 'Quote (⌘+⇧+.)',\n    icon: QuoteIcon,\n    label: 'Quote',\n    value: BlockquotePlugin.key,\n  },\n  {\n    description: 'Bulleted list',\n    icon: ListIcon,\n    label: 'Bulleted list',\n    value: ListStyleType.Disc,\n  },\n  {\n    description: 'Numbered list',\n    icon: ListOrderedIcon,\n    label: 'Numbered list',\n    value: ListStyleType.Decimal,\n  },\n];\n\nconst defaultItem = items.find((item) => item.value === ParagraphPlugin.key)!;\n\nexport function TurnIntoDropdownMenu(props: DropdownMenuProps) {\n  const value: string = useEditorSelector((editor) => {\n    let initialNodeType: string = ParagraphPlugin.key;\n    let allNodesMatchInitialNodeType = false;\n    const codeBlockEntries = getNodeEntries(editor, {\n      match: (n) => isBlock(editor, n),\n      mode: 'highest',\n    });\n    const nodes = Array.from(codeBlockEntries);\n\n    if (nodes.length > 0) {\n      initialNodeType = nodes[0][0].type as string;\n      allNodesMatchInitialNodeType = nodes.every(([node]) => {\n        const type: string = (node?.type as string) || ParagraphPlugin.key;\n\n        return type === initialNodeType;\n      });\n    }\n\n    return allNodesMatchInitialNodeType ? initialNodeType : ParagraphPlugin.key;\n  }, []);\n\n  const editor = useEditorRef();\n  const openState = useOpenState();\n\n  const selectedItem =\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n    items.find((item) => item.value === value) ?? defaultItem;\n  const { icon: SelectedItemIcon, label: selectedItemLabel } = selectedItem;\n\n  return (\n    <DropdownMenu modal={false} {...openState} {...props}>\n      <DropdownMenuTrigger asChild>\n        <ToolbarButton pressed={openState.open} tooltip=\"Turn into\" isDropdown>\n          <SelectedItemIcon className=\"size-5 lg:hidden\" />\n          <span className=\"max-lg:hidden\">{selectedItemLabel}</span>\n        </ToolbarButton>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent\n        className=\"ignore-click-outside/toolbar min-w-0\"\n        align=\"start\"\n      >\n        <DropdownMenuLabel>Turn into</DropdownMenuLabel>\n\n        <DropdownMenuRadioGroup\n          className=\"flex flex-col gap-0.5\"\n          value={value}\n          onValueChange={(type: any) => {\n            if (type === ListStyleType.Disc || type === ListStyleType.Decimal) {\n              toggleIndentList(editor, {\n                listStyleType: type,\n              });\n            }\n\n            editor.tf.toggle.block({ type });\n\n            focusEditor(editor);\n          }}\n        >\n          {items.map(({ icon: Icon, label, value: itemValue }) => (\n            <DropdownMenuRadioItem\n              key={itemValue}\n              className=\"min-w-[180px]\"\n              value={itemValue}\n            >\n              <Icon className=\"mr-2 size-5\" />\n              {label}\n            </DropdownMenuRadioItem>\n          ))}\n        </DropdownMenuRadioGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "path": "plate-ui/turn-into-dropdown-menu.tsx",
      "target": "components/plate-ui/turn-into-dropdown-menu.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "turn-into-dropdown-menu",
  "registryDependencies": [
    "dropdown-menu",
    "toolbar"
  ],
  "type": "registry:ui"
}